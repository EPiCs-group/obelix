import random, string
from rdkit import Chem
import numpy as np
import pandas as pd

def add_code_to_structure():
    N = 10
    code_name = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
    return code_name
    

def change_second_line_xyz(xyz, new_content=''):
    with open('{}'.format(xyz), 'r', newline='\n') as file:
        # read a list of lines into data
        data = file.readlines()
    # now change the 2nd line, note that you have to add a newline
    
    if new_content == '':
        data[1] = '\n'
    else:
        data[1] = '{}\n'.format(new_content)
        
    # and write everything back
    with open('{}'.format(xyz), 'w') as file:
        file.writelines(data)


def get_ligands_from_smiles(ligands_SMILES):
    ligand_mol = ['']*len(ligands_SMILES)
    for index, ligand in enumerate(ligands_SMILES):
        ligands_SMILES[index] = Chem.MolFromSmiles(ligand)
    
    return ligand_mol


def dataframe_from_dictionary(dictionary):
    Dataframe = pd.DataFrame.from_dict({i: dictionary[i]
                           for i in dictionary.keys()}, orient='index')
    return Dataframe


def get_cluster_centroid_coord(n_clusters, unique_labels, dataframe):

    """
    This function identifies the centroids of the clusters generated by the UMAP 
    algorithm. 
    
    Args:
        n_clusters    : integer
        unique_labels : array of integers 
        dataframe     : pandas dataframe containing UMAP1, UMAP2
    Return:
        centroids     : array of float sized (2, n_clusters), 
                          where 2 is (x, y) coordinates
    """

    # initialize cluster centroids array
    centroids = np.zeros((2, n_clusters))
    
    # fill the array with the coords
    for j, u_label in enumerate(unique_labels):
        UMAP1 = dataframe[(dataframe['label'] == u_label)].mean()['UMAP-1']
        UMAP2 =  dataframe[(dataframe['label'] == u_label)].mean()['UMAP-2']    
        temp_coord_array = np.array([UMAP1, UMAP2])
        centroids[1][j] = temp_coord_array[0]
        centroids[0][j] = temp_coord_array[1]
        
    return centroids


def find_bidentate(xyz):
    
    with open(xyz) as file:
        listfile = []
    
        for line in file:
            listfile.append(line.strip())
    indices = [0]*3
    atoms = []
    for index, atom in enumerate(listfile):
        if atom[0] == 'P':
            if not indices[0]:
                indices[0] = index - 1
            else:
                indices[2] = index - 1
            atoms.append(atom[0])
        else:
            if atom[:2] == 'Ir':
                indices[1] = index - 1
                atoms.append(atom[:2])
    return indices