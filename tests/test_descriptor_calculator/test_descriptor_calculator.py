"""
this test will have different types of inputs: xyz file manual, xyz file automatic, dft log, etc. The mace descriptor workflow calls descirpt calculator morfeus function with a metal adduct ‘pristine’. This is a specific case because we start with smiles name and ligand, but to cover other cases where xyz file can be generated by other means, we need a separate test. In this test, the input will be a combination of the following:
Xyz file, output_type field in the Descriptor constructor, metal_adduct: call to calculate_morfeus_descriptor remains same, but based on the value of the metal adduct and output_type, the function will branch to the corresponding if condition. So, this way, we keep the body of the calculate descriptor part of the test constant.



"""

import os

import numpy as np
import pandas as pd

from obelix.descriptor_calculator import Descriptors


def test_descriptor_calculation_xyz_files_pristine():

    path_to_xyz_files = os.path.join(
        os.path.abspath(os.path.dirname(__file__)), "data", "xyz_files", "pristine"
    )

    descriptors = Descriptors(
        central_atom="Rh",
        path_to_workflow=path_to_xyz_files,
        output_type="xyz",
    )

    descriptors.calculate_morfeus_descriptors(
        geom_type="BD", solvent=None, printout=False, metal_adduct="pristine"
    )

    # converting to csv can be skipped because the output is already in dataframe format. If we convert to csv, we will have to read it back to dataframe for comparison. SInce we do not create a csv file, we do not need to ensure to delete the csv file after the test.
    # skipping the conversion to csv is leading to failure of the all testcases except comparison of the descriptor values. It seems that the convert to csv function is introducing the column headers of index values and filenames and element values which are not present in the pandas dataframe
    descriptors.descriptor_df.to_csv(
        os.path.join(
            os.path.abspath(os.path.dirname(__file__)),
            "output",
            "descriptors.csv",
        ),
        index=False,
    )

    # test cases
    assert isinstance(descriptors.descriptor_df, pd.DataFrame)

    # convert expected csv to dataframe for comparison
    path_expected_csv = os.path.join(
        os.path.abspath(os.path.dirname(__file__)),
        "expected_output",
        "descriptors_pristine.csv",
    )
    output_csv = os.path.join(
        os.path.abspath(os.path.dirname(__file__)),
        "output",
        "descriptors.csv",
    )

    expected_df = pd.read_csv(path_expected_csv)
    output_df = pd.read_csv(output_csv)

    # assert descriptor values
    # Filter the columns containing the descriptor values
    output_descriptor_values_df = output_df.loc[
        :, ~output_df.columns.str.contains("index|element|filename_tud")
    ]
    expected_descriptor_values_df = expected_df.loc[
        :, ~expected_df.columns.str.contains("index|element|filename_tud")
    ]

    # Convert the dataframes to numpy arrays for comparison
    output_descriptor_values = output_descriptor_values_df.to_numpy()
    expected_descriptor_values = expected_descriptor_values_df.to_numpy()
    assert np.allclose(
        output_descriptor_values, expected_descriptor_values
    ), "The descriptor values in the output csv file does not match the expected descriptor values for this input."

    # # assert index values
    output_index_values_df = output_df.loc[:, output_df.columns.str.contains("index")]
    expected_index_values_df = expected_df.loc[
        :, expected_df.columns.str.contains("index")
    ]
    assert output_index_values_df.equals(
        expected_index_values_df
    ), "The index values in the output csv file does not match the expected index values for this input."

    # # assert filename values
    assert output_df["filename_tud"].equals(
        expected_df["filename_tud"]
    ), "The filename values in the output csv file does not match the expected filename values for this input."

    # # assert element values
    output_element_values_df = output_df.loc[
        :, output_df.columns.str.contains("element")
    ]
    expected_element_values_df = expected_df.loc[
        :, expected_df.columns.str.contains("element")
    ]
    assert output_element_values_df.equals(
        expected_element_values_df
    ), "The element values in the output csv file does not match the expected element values for this input."


# def test_descriptor_calculation_dft_log_files():

#     # setup
#     descriptors = Descriptors(
#         central_atom="Rh",
#         path_to_workflow=os.path.join(
#             os.getcwd(), "output_test_calculate_morfeus_descriptors_dft_log"
#         ),
#         output_type="dft_log",
#     )
#     descriptors.calculate_morfeus_descriptors(
#         geom_type="BD", solvent=None, printout=False, metal_adduct="nbd"
#     )
#     descriptors.descriptor_df.to_csv("descriptors.csv", index=False)

#     # test cases
#     assert isinstance(descriptors.descriptor_df, pd.DataFrame)
#     assert os.path.exists("descriptors.csv")
#     # assert descriptor values
#     # assert index values
#     # assert filename values
#     # assert element values


# def test_descriptor_calculation_crest_files():

#     # setup
#     descriptors = Descriptors(
#         central_atom="Rh",
#         path_to_workflow=os.path.join(
#             os.getcwd(), "output_test_calculate_morfeus_descriptors_crest"
#         ),
#         output_type="crest",
#     )
#     descriptors.calculate_morfeus_descriptors(
#         geom_type="BD", solvent=None, printout=False, metal_adduct="nbd"
#     )
#     descriptors.descriptor_df.to_csv("descriptors.csv", index=False)

#     # test cases
#     assert isinstance(descriptors.descriptor_df, pd.DataFrame)
#     assert os.path.exists("descriptors.csv")
#     # assert descriptor values
#     # assert index values
#     # assert filename values
#     # assert element values


### Below is a parametrized test that can be used to test the above three tests in one go. This implementation is advanced and requires a bit more understanding of pytest fixtures and parametrization. It is not necessary to implement this for the current task, but it is good to know that this is possible.

# # parametrize for [(xyz files, pristine), (xyz files, nbd), (dft log, nbd), (crest, pristine)]
# def test_descriptor_calculation(output_type, metal_adduct):
#     # setup

#     descriptors = Descriptors(
#         central_atom="Rh",
#         path_to_workflow=os.path.join(
#             os.getcwd(), "path_to_input(xyz files/dft log files/crest)"
#         ),
#         output_type=output_type,
#     )
#     descriptors.calculate_morfeus_descriptors(
#         geom_type="BD", solvent=None, printout=False, metal_adduct=metal_adduct
#     )
#     descriptors.descriptor_df.to_csv("descriptors.csv", index=False)

#     # assert descriptor values
#     # assert index values
#     # assert filename values
#     # assert element values
